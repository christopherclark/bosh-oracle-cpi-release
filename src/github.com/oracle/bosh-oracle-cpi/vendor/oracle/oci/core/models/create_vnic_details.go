// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVnicDetails Contains properties for a VNIC. You use this object when creating the
// primary VNIC during instance launch or when creating a secondary VNIC.
// For more information about VNICs, see
// [Virtual Network Interface Cards (VNICs)](/Content/Network/Tasks/managingVNICs.htm).
//
// swagger:model CreateVnicDetails
type CreateVnicDetails struct {

	// Whether the VNIC should be assigned a public IP address. Defaults to whether
	// the subnet is public or private. If not set and the VNIC is being created
	// in a private subnet (that is, where `prohibitPublicIpOnVnic` = true in the
	// [Subnet](#/en/iaas/20160918/Subnet/)), then no public IP address is assigned.
	// If not set and the subnet is public (`prohibitPublicIpOnVnic` = false), then
	// a public IP address is assigned. If set to true and
	// `prohibitPublicIpOnVnic` = true, an error is returned.
	//
	// **Note:** This public IP address is associated with the primary private IP
	// on the VNIC. For more information, see
	// [IP Addresses](/Content/Network/Tasks/managingIPaddresses.htm).
	//
	// **Note:** There's a limit to the number of [public IPs](#/en/iaas/20160918/PublicIp/)
	// a VNIC or instance can have. If you try to create a secondary VNIC
	// with an assigned public IP for an instance that has already
	// reached its public IP limit, an error is returned. For information
	// about the public IP limits, see
	// [Public IP Addresses](/Content/Network/Tasks/managingpublicIPs.htm).
	//
	// Example: `false`
	//
	AssignPublicIP *bool `json:"assignPublicIp,omitempty"`

	// A user-friendly name for the VNIC. Does not have to be unique.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The hostname for the VNIC's primary private IP. Used for DNS. The value is the hostname
	// portion of the primary private IP's fully qualified domain name (FQDN)
	// (for example, `bminstance-1` in FQDN `bminstance-1.subnet123.vcn1.oraclevcn.com`).
	// Must be unique across all VNICs in the subnet and comply with
	// [RFC 952](https://tools.ietf.org/html/rfc952) and
	// [RFC 1123](https://tools.ietf.org/html/rfc1123).
	// The value appears in the [Vnic](#/en/iaas/20160918/Vnic/) object and also the
	// [PrivateIp](#/en/iaas/20160918/PrivateIp/) object returned by
	// [ListPrivateIps](#/en/iaas/20160918/PrivateIp/ListPrivateIps) and
	// [GetPrivateIp](#/en/iaas/20160918/PrivateIp/GetPrivateIp).
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// When launching an instance, use this `hostnameLabel` instead
	// of the deprecated `hostnameLabel` in
	// [LaunchInstanceDetails](#/en/iaas/20160918/requests/LaunchInstanceDetails).
	// If you provide both, the values must match.
	//
	// Example: `bminstance-1`
	//
	// Max Length: 63
	// Min Length: 1
	HostnameLabel string `json:"hostnameLabel,omitempty"`

	// A private IP address of your choice to assign to the VNIC. Must be an
	// available IP address within the subnet's CIDR. If you don't specify a
	// value, Oracle automatically assigns a private IP address from the subnet.
	// This is the VNIC's *primary* private IP address. The value appears in
	// the [Vnic](#/en/iaas/20160918/Vnic/) object and also the
	// [PrivateIp](#/en/iaas/20160918/PrivateIp/) object returned by
	// [ListPrivateIps](#/en/iaas/20160918/PrivateIp/ListPrivateIps) and
	// [GetPrivateIp](#/en/iaas/20160918/PrivateIp/GetPrivateIp).
	//
	// Example: `10.0.3.3`
	//
	// Max Length: 46
	// Min Length: 1
	PrivateIP string `json:"privateIp,omitempty"`

	// Whether the source/destination check is disabled on the VNIC.
	// Defaults to `false`, which means the check is performed. For information
	// about why you would skip the source/destination check, see
	// [Using a Private IP as a Route Target](/Content/Network/Tasks/managingroutetables.htm#privateip).
	//
	// Example: `true`
	//
	SkipSourceDestCheck bool `json:"skipSourceDestCheck,omitempty"`

	// The OCID of the subnet to create the VNIC in. When launching an instance,
	// use this `subnetId` instead of the deprecated `subnetId` in
	// [LaunchInstanceDetails](#/en/iaas/20160918/requests/LaunchInstanceDetails).
	// At least one of them is required; if you provide both, the values must match.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	SubnetID *string `json:"subnetId"`
}

// Validate validates this create vnic details
func (m *CreateVnicDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostnameLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVnicDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVnicDetails) validateHostnameLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.HostnameLabel) { // not required
		return nil
	}

	if err := validate.MinLength("hostnameLabel", "body", string(m.HostnameLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hostnameLabel", "body", string(m.HostnameLabel), 63); err != nil {
		return err
	}

	return nil
}

func (m *CreateVnicDetails) validatePrivateIP(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIP) { // not required
		return nil
	}

	if err := validate.MinLength("privateIp", "body", string(m.PrivateIP), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("privateIp", "body", string(m.PrivateIP), 46); err != nil {
		return err
	}

	return nil
}

func (m *CreateVnicDetails) validateSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("subnetId", "body", m.SubnetID); err != nil {
		return err
	}

	if err := validate.MinLength("subnetId", "body", string(*m.SubnetID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("subnetId", "body", string(*m.SubnetID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVnicDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVnicDetails) UnmarshalBinary(b []byte) error {
	var res CreateVnicDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
