---
task-definitions:
  - &terraform-setup
    task: prepare-terraform-env
    file: cpi-release-src/ci/tasks/prepare-terraform-env.yml
    params:
      oracle_apikey: ((oracle-apikey.private_key))

  - &terraform-apply
    put: terraform-oci
    params:
      terraform_source: cpi-release-src/ci/terraform
      generate_random_name: true
      var_files: [terraform-env/oci.vars]
      plugin_dir: /.terraform.d/plugins/linux_amd64

  - &terraform-destroy
    put: terraform-oci
    params:
      terraform_source: cpi-release-src/ci/terraform
      env_name_file: terraform-oci/name
      action: destroy
      var_files: [terraform-env/oci.vars]
      plugin_dir: /.terraform.d/plugins/linux_amd64
    get_params:
        action: destroy

  - &prepare-test-config
    task: prepare-test-config
    file: cpi-release-src/ci/tasks/prepare-test-config.yml
    params:
      oracle_tenancy: ((oracle-tenancy))
      oracle_user: ((oracle-user))
      oracle_region: ((oracle-region))
      oracle_fingerprint: ((oracle-fingerprint))
      oracle_apikey: ((oracle-apikey.private_key))
      director_public_ip: ((director-public-ip))

  - &oci-tests
    task: oci-tests
    file: cpi-release-src/ci/tasks/oci-tests.yml
    params:
          TEST_SPEC: "Test_[^StemcellOps]"


  - &setup-director
    task: setup-director
    file: cpi-release-src/ci/tasks/setup-director.yml

  - &teardown-director
    task: teardown-director
    file: cpi-release-src/ci/tasks/teardown-director.yml

  - &run-bats
    task: run-bats
    file: cpi-release-src/ci/tasks/run-bats.yml

groups:
  - name: bosh-oracle-cpi-release
    jobs:
      - run-unittests
      - run-ocitests
      - build-candidate
      - run-bats
      - build-final

jobs:
  - name: run-unittests
    plan:
      - {trigger: true, get: cpi-release-src, resource: bosh-cpi-release-src}

      - task: unit-tests
        file: cpi-release-src/ci/tasks/unit-tests.yml


  - name: run-ocitests
    serial_groups: [oci-resource-consumer]
    serial: true
    plan:
      - aggregate:
        - {trigger: true, passed: [run-unittests], get: cpi-release-src, resource: bosh-cpi-release-src}
        - {trigger: true, get: fixture-ssh-keys, resource: fixture-env, params: {file: oci-config.tgz, unpack: true}}

      - <<: *terraform-setup
      - <<: *terraform-apply
      - <<: *prepare-test-config
      - do:
        - <<: *oci-tests
        ensure:
          do:
            - <<: *terraform-destroy

  - name: build-candidate
    serial: true
    plan:
      - aggregate:
        - {trigger: true, passed: [run-unittests, run-ocitests], get: cpi-release-src, resource: bosh-cpi-release-src}
        - {trigger: false, get: dev-version-semver,   params: {bump: patch}}
        - {trigger: true,  get: stemcell, resource: oracle-ubuntu-stemcell}

      - put: dev-version-semver
        params: {file: dev-version-semver/version}

      - task: build-dev-release
        file: cpi-release-src/ci/tasks/build-candidate.yml

      - put: dev-release-cpi
        params: {file: candidate/dev_release/bosh-oracle-cpi-dev-*.tgz}

  - name: run-bats
    serial_groups: [oci-resource-consumer]
    serial: true
    plan:
      - aggregate:
        - {trigger: true, passed: [build-candidate], get: cpi-release-src, resource: bosh-cpi-release-src}
        - {trigger: true, passed: [build-candidate], get: stemcell, resource: oracle-ubuntu-stemcell}
        - {trigger: true,                            get: fixture-ssh-keys, resource: fixture-env, params: {file: oci-config.tgz, unpack: true}}
        - {trigger: false,                           get: dev-version-semver}
        - {trigger: false,                           get: bats}
        - {trigger: false,                           get: bosh-deployment}

      - task: download-cpi
        file: cpi-release-src/ci/tasks/download-cpi.yml
        params:
          oracle_tenancy: ((oracle-tenancy))
          oracle_user: ((oracle-user))
          oracle_region: ((oracle-region))
          oracle_fingerprint: ((oracle-fingerprint))
          oracle_apikey: ((oracle-apikey.private_key))
          oracle_namespace: ((oracle-namespace))
          oracle_bucket: ((cpi-dev-release-bucket))

      - <<: *terraform-setup
      - <<: *terraform-apply
      - <<: *prepare-test-config
      - do:
        - <<: *setup-director
        - <<: *run-bats
        ensure:
          do:
            - <<: *teardown-director
            - <<: *terraform-destroy

  - name: build-final
    serial_groups: [oci-resource-consumer]
    serial: true
    plan:
      - aggregate:
         - {trigger: false, get: dev-version-semver}
         - {trigger: false, get: final-version-semver,   params: {bump: major}}
         - {trigger: true, passed: [run-bats], get: cpi-release-src, resource: bosh-cpi-release-src}
         - {trigger: true, passed: [run-bats], get: stemcell, resource: oracle-ubuntu-stemcell}

      - task: download-cpi
        file: cpi-release-src/ci/tasks/download-cpi.yml
        params:
          oracle_tenancy: ((oracle-tenancy))
          oracle_user: ((oracle-user))
          oracle_region: ((oracle-region))
          oracle_fingerprint: ((oracle-fingerprint))
          oracle_apikey: ((oracle-apikey.private_key))
          oracle_namespace: ((oracle-namespace))
          oracle_bucket: ((cpi-dev-release-bucket))

      - task: build-final-release
        file: cpi-release-src/ci/tasks/build-final-release.yml
        params:
          host: ((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
          region_name: ((oracle-region))
          bucket: ((cpi-blobs-bucket))
          access_key_id: ((oracle-s3-access-key-id))
          secret_access_key: ((oracle-s3-secret-access-key))

      - put: final-version-semver
        params: {file: final-version-semver/version}

      - put: final-release-cpi
        params:
          file: promoted/bosh-oracle-cpi-*.tgz

      - put: bosh-cpi-release-publish
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/version}

resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ((docker-repo-name))/oci-terraform-resource

resources:
  - name: bosh-cpi-release-publish
    type: git
    source:
      uri: git@github.com:((github-org))/bosh-oracle-cpi-release.git
      branch: ((cpi-release-branch))
      private_key: ((github-private-key.private_key))

  - name: bosh-cpi-release-src
    type: git
    source:
      uri: https://github.com/((github-org))/bosh-oracle-cpi-release.git
      branch: ((cpi-release-branch))
      ignore_paths:
        - .final_builds/**/*.yml
        -  releases/**/*.yml
      username: ((github-user.username))
      password: ((github-user.password))

  - name: bosh-deployment
    type: git
    source:
      uri: https://github.com/dmutreja/bosh-deployment.git
      branch: oracle
      username: ((github-user.username))
      password: ((github-user.password))

  - name: dev-release-cpi
    type: s3
    source:
       endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
       region_name: ((oracle-region))
       bucket: ((cpi-dev-release-bucket))
       regexp: bosh-oracle-cpi-(.*)\.tgz
       access_key_id: ((oracle-s3-access-key-id))
       secret_access_key: ((oracle-s3-secret-access-key))
       private: true

  - name: final-release-cpi
    type: s3
    source:
       endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
       region_name: ((oracle-region))
       bucket: ((cpi-final-release-bucket))
       regexp: bosh-oracle-cpi-(.*)\.tgz
       access_key_id: ((oracle-s3-access-key-id))
       secret_access_key: ((oracle-s3-secret-access-key))
       private: true

  - name: oracle-ubuntu-stemcell
    type: s3
    source:
       endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
       region_name: ((oracle-region))
       bucket: ((stemcell-bucket))
       regexp: light-oracle-ubuntu-trusty-(.*)\.tgz
       access_key_id: ((oracle-s3-access-key-id))
       secret_access_key: ((oracle-s3-secret-access-key))
       private: true

  - name: dev-version-semver
    type: semver
    source:
      key: current-cpi-version
      bucket: ((version-semver-bucket-name))
      access_key_id: ((oracle-s3-access-key-id))
      secret_access_key: ((oracle-s3-secret-access-key))
      region_name: ((oracle-region))
      endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
      initial_version:   1.0.0

  - name: final-version-semver
    type: semver
    source:
      key: current-cpi-version
      bucket: ((version-semver-bucket-name))
      access_key_id: ((oracle-s3-access-key-id))
      secret_access_key: ((oracle-s3-secret-access-key))
      region_name: ((oracle-region))
      endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
      initial_version: 1.0.0

  - name: fixture-env
    type: s3
    source:
       endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
       region_name: ((oracle-region))
       bucket: ((oracle-fixture-env-bucket-name))
       regexp: (.*)\.tgz
       access_key_id: ((oracle-s3-access-key-id))
       secret_access_key: ((oracle-s3-secret-access-key))
       private: true

  - name: terraform-oci
    type: terraform
    source:
       storage:
         bucket: ((oracle-fixture-env-bucket-name))
         bucket_path: terraform-prod-ci/
         access_key_id: ((oracle-s3-access-key-id))
         secret_access_key: ((oracle-s3-secret-access-key))
         region_name: ((oracle-region))
         endpoint: https://((oracle-namespace)).compat.objectstorage.((oracle-region)).oraclecloud.com
         use_signing_v4: true
       vars:
         oracle_tenancy_ocid: ((oracle-tenancy))
         oracle_user_ocid: ((oracle-user))
         oracle_region: ((oracle-region))
         oracle_fingerprint: ((oracle-fingerprint))
         director_vcn: ci_prod_vcn
         director_compartment_name: ((director-compartment-name))

  - name: bats
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
      branch: gocli-bats
